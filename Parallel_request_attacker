import requests
import time
import argparse
from concurrent.futures import ThreadPoolExecutor, as_completed

# --- Step 1: Function to Send a Single Request ---
def send_request(i, url, headers, payload):
    """Sends a single POST request and returns the result."""
    start_time = time.time()
    try:
        response = requests.post(url, json=payload, headers=headers)
        elapsed = time.time() - start_time
        status = "✅" if response.status_code < 400 else "❌"
        return {
            "id": i,
            "status": status,
            "code": response.status_code,
            "text": response.text[:100],
            "time": elapsed
        }
    except Exception as e:
        elapsed = time.time() - start_time
        return {
            "id": i,
            "status": "❌",
            "code": "Exception",
            "text": str(e),
            "time": elapsed
        }

# --- Step 2: Run Requests in Parallel ---
def run_parallel_requests(url, num_requests, payload, headers):
    """Executes requests in parallel using a thread pool."""
    results = []
    with ThreadPoolExecutor(max_workers=num_requests) as executor:
        futures = [executor.submit(send_request, i, url, headers, payload) for i in range(1, num_requests + 1)]
        for future in as_completed(futures):
            results.append(future.result())
    return results

# --- Step 3: Execute and Print Summary ---
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Parallel HTTP requester for load testing.")
    parser.add_argument("--url", required=True, help="The target URL for the POST request.")
    parser.add_argument("--requests", type=int, default=100, help="The number of parallel requests to send.")
    parser.add_argument("--cookies", required=True, help="The full string of cookies to include in the request header.")
    parser.add_argument("--xsrf_token", required=True, help="The X-XSRF-TOKEN to include in the request header.")
    args = parser.parse_args()

    # Define Request Details from arguments and hardcoded values
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Origin": "",
        "Referer": "",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
        "X-XSRF-TOKEN": args.xsrf_token,
        "Cookie": args.cookies
    }
    
    payload = {
        "user_id": "",
        "user_name": "Sample_ukser",
        "role_type": "user"
    }

    print(f"Sending {args.requests} parallel requests to {args.url}...")
    responses = run_parallel_requests(args.url, args.requests, payload, headers)
    
    success_count = sum(1 for r in responses if r["status"] == "✅")
    error_count = len(responses) - success_count
    times = [r["time"] for r in responses]
    avg_time = sum(times) / len(times)
    min_time = min(times)
    max_time = max(times)

    print("\n--- Summary ---")
    print(f"✅ Success: {success_count}")
    print(f"❌ Errors: {error_count}")
    print(f"⏱️ Avg Response Time: {avg_time:.2f} sec")
    print(f"🚀 Fastest: {min_time:.2f} sec")
    print(f"🐢 Slowest: {max_time:.2f} sec\n")

    for r in responses:
        print(f"{r['status']} Request {r['id']}: {r['code']} - {r['text']} ({r['time']:.2f} sec)")
